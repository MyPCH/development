local kube = import 'kube.jsonnet';
local obj = import 'obj.jsonnet';

local secrets(config) = (
  local holderSecrets(namespace, holder) = (
    local toSecret(name, group) = (
      assert std.objectHas(group, 'name'): "missing name %s" % std.toString(group);
      if std.objectHas(group, 'secret') && std.objectHas(group.secret, 'data_')
      then kube.externalSecret(config, group, namespace)
    );

    obj.values(std.prune(std.mapWithKey(toSecret, holder.groups)))
  );

  std.flattenArrays(obj.values(std.mapWithKey(holderSecrets, config.tidepool.groups))) +
  holderSecrets('default', config)
);

function(config) (
  local group = config.groups.externalSecrets;
  if group.enabled then {
    Helmrelease: if group.helmrelease.create then kube.helmrelease(config, group),
    Namespace: if group.namespace.create then kube.namespace(config, group),
    ExternalSecrets: secrets(config),
  }
)
