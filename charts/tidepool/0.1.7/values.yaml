global:
  fullnameOverride: ""                            #
  nameOverride: ""                                # the name to use for the helm chart, if given
    
  cluster:
    eks:
      region: "us-west-2"                         # AWS region
      name: "foobar"                              # K8s cluster name
    mesh:                                         # service mesh to use
      name: linkerd
      enabled: false
    gateway:                                      # gateway service                  
      type: "LoadBalancer"
      proxy:                                                            
        name: gateway-proxy-v2                                             
        namespace: gloo-system  
    logLevel: info                                # the default log level for all services
  environment:                                    # the cluster name
    namespace:
      create: false                               # whether to create the namespace
      annotations: {}                             # namespace annotations
    hosts:
      default:
        protocol: http                            # the protocol to use for signup emails
        #host:                                    # default host. 
      http:                                                            
        enabled: true
        port: "8080"                              # default HTTP port - must be quoted
        dnsNames: [ "localhost" ]                 # list of DNS names
      https:                                                           
        enabled: false 
        port: "8433"                              # default HTTPS port - must be quoted
        dnsNames: []                              # list of DNS names
        certificate:
          issuer: ""                              # the name of the certificate issuer
          secretName: ""                          # secret name to hold secret in
          issuerKind: ClusterIssuer               # kind of the certificate issuer

# environment-wide secrets
userdata:
  secret: 
    create: false
    data_: 
      UserPasswordSalt: ""
      UserIdSalt: ""
      GroupIdEncryptionKey: ""
server:
  secret:
    create: false
    data_:
      ServiceAuth: ""
mongo:  
  secret:
    create: false
    data_:
      Scheme: "mongodb"
      Addresses: "mongodb"
      Username: ""
      Password: ""
      Database: ""
      Tls: "true"
      OptParams: ""

# per-enviroment externally-shared-secrets
dexcom:
  secret:
    create: false
    data_:
      ClientId: ""
      ClientSecret: ""
      StateSalt: ""                            # the Dexcom client API url
carelink:
  secret:
    create: false
    data_:
      CareLinkSalt: ""
mailchimp:
  secret:
    create: false
    data_:
      MailchimpClinicLists: ""
      MailchimpURL: ""
      MailchimpPersonalLists: ""
      MailchimpApiKey: ""
kissmetrics:
  secret:
    create: false
    data_:
      KissmetricsAPIKey: ""
      KissmetricsToken: ""
      UCSFKissmetricsAPIKey: ""
      UCSFWhitelist: ""

# per environment, third-party-internal-services
nosqlclient:
  enabled: false
  deployment:
    image: tidepool/nosqlclient:2.3.2
  service:
    port: 3000
gloo:
  enabled: true
  settings:
    create: true
  discovery:
    fdsMode: WHITELIST
  namespace:
    create: false
  gatewayProxies:
    gatewayProxyV2:
      service:
        httpPort: 8080                                               # HTTP port to listen on
        #httpsPort: 8443                                             # HTTPS port to listen on
        type: ClusterIP                                              # Type of service to create (alternative: ClusterIP)
        #extraAnnotations:                                           # Use to create an AWS Network Load Balancer 
          #service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
mongodb:
  enabled: true
  image:
    tag: "3.6"
  persistence:
    enabled: false
  fullnameOverride: "mongodb"

# Tidepool services
blip:
  service: 
    port: 3000
  deployment:
    podAnnotations: {}
    image: tidepool/blip:release-1.23.0-264f7ad48eb7d8099b00dce07fa8576f7068d0a0
  resources: {}
  securityContext: {}
  hpa:
    enabled: false
export:
  enabled: true
  secret:
     SessionEncryptionKey: ""
  deployment:
    podAnnotations: {}
    image: tidepool/export:develop-c67e1425a4f6eb4c3f70f95284a24899a9ff986f
  service:
    port: 9300
  resources: {}
  securityContext: {}
  hpa:
    enabled: false
gatekeeper:
  deployment:
    podAnnotations: {}
    image: tidepool/gatekeeper:develop-6a0e3e6d83552ce378b21d76354973dcb95c9fa1
  service:
    port: 9123
  resources: {}
  securityContext: {}
  hpa:
    enabled: false
  nodeEnvironment: production 
messageapi:
  deployment:
    podAnnotations: {}
    image: tidepool/message-api:develop-448835b6be0c27185e487f582f9b47a784aa781f
    env:
      window: 21
  service:
    port: 9119
  resources: {}
  securityContext: {}
  hpa:
    enabled: false
  nodeEnvironment: production 
seagull:
  deployment:
    podAnnotations: {}
    image: tidepool/seagull:develop-b06870d3752afede7da24116763fd5a161b84da0
  service:
    port: 9120
  resources: {}
  securityContext: {}
  hpa:
    enabled: false
  nodeEnvironment: production 
highwater:
  deployment:
    podAnnotations: {}
    image: tidepool/highwater:develop-aaefb43df9a132f6c012f7216952e8650e6f6b4a
  secret:
    UserIdSalt: ""
  service:
    port: 9191
  resources: {}
  securityContext: {}
  hpa:
    enabled: false
  nodeEnvironment: production 
auth:
  secret:
    create: false
    data_:
      ServiceAuth:  ""
  deployment:
    image: tidepool/platform-auth:develop-e95a3af6080aab5b845d1531015f0c5fd7134f80
    podAnnotations: {}
  service:
    port: 9222
  resources: {}
  securityContext: {}
  hpa:
    enabled: false
blob:
  iamRole: ""
  secret:
    create: false
    data_:
      ServiceAuth: "" 
  service:
    port: 9225   
  deployment:
    podAnnotations: {}
    image: tidepool/platform-blob:develop-e95a3af6080aab5b845d1531015f0c5fd7134f80
    env:
      store: 
        bucket: "data"                                            
        prefix: "blobs" 
        directory: "_data/blobs"                                            # directory to use if using local file storage
        type: file
        #type: s3
  resources: {}
  securityContext: {}
  hpa:
    enabled: false
data:
  secret:
    create: false
    data_:
      ServiceAuth: ""
  service:
    port: 9220
  deployment:
    podAnnotations: {}
    image: tidepool/platform-data:develop-e95a3af6080aab5b845d1531015f0c5fd7134f80
  resources: {}
  securityContext: {}
  hpa:
    enabled: false
image:
  iamRole: ""
  secret:
    create: false
    data_:
      ServiceAuth: ""
  service:
    port: 9226 
  deployment:
    podAnnotations: {}
    image: tidepool/platform-image:develop-e95a3af6080aab5b845d1531015f0c5fd7134f80
    env:
      store: 
        directory: "_data/image"                                            # directory to use if using local file storage
        prefix: "images"
        bucket:  "data"
        type: file
        #type: s3
  resources: {}
  securityContext: {}
  hpa:
    enabled: false
notification:
  secret:
    create: false
    data_:
      ServiceAuth: ""
  service:
    port: 9223 
  deployment:
    podAnnotations: {}
    image: tidepool/platform-notification:develop-e95a3af6080aab5b845d1531015f0c5fd7134f80
  resources: {}
  securityContext: {}
  hpa:
    enabled: false
task:
  secret:
    create: false
    data_:
      ServiceAuth: ""
  service:
    port: 9224 
  deployment:
    podAnnotations: {}
    image: tidepool/platform-task:develop-e95a3af6080aab5b845d1531015f0c5fd7134f80
    env:
      queue:
        delay: 5
        workers: 5
  resources: {}
  securityContext: {}
  hpa:
    enabled: false
user:
  secret:
    create: false
    data_:
      ServiceAuth: ""
  deployment:
    podAnnotations: {}
    image: tidepool/platform-user:develop-e95a3af6080aab5b845d1531015f0c5fd7134f80
  service:
    port: 9221
  resources: {}
  securityContext: {}
  hpa:
    enabled: false
tools: 
  enabled: true
  deployment:
    podAnnotations: {}
    image: tidepool/platform-tools:develop-e95a3af6080aab5b845d1531015f0c5fd7134f80
  resources: {}
  securityContext: {}
  hpa:
    enabled: false
shoreline:
  configmap:
    create: false
    data:
      ClinicDemoUserId: ""
  secret:
    create: false
    data_:
      ServiceAuth: ""
      UserLongTermKey: 
      UserMailVerification: ""
      UserPasswordSalt: ""
      ClinicDemoUserId: ""
  deployment:
    podAnnotations: {}
    image: tidepool/shoreline:develop-169c2a61c33d31bb185663cf0033fd2a364d3492
  service:
    port: 9107
  resources: {}
  securityContext: {}
  hpa:
    enabled: false
tidewhisperer:
  deployment:
    podAnnotations: {}
    image: tidepool/tide-whisperer:develop-3d9d8e6b3417c70679ec43420f2a5e4a69cf9098
  service:
    port: 9127
  resources: {}
  securityContext: {}
  hpa:
    enabled: false
jellyfish: 
  iamRole: ""
  enabled: true
  deployment:
    podAnnotations: {}
    image: tidepool/jellyfish:develop-2ed5f94724055c613be193cfbbbc3a8e41919de1
    env:
      store: 
        bucket: "data"
        type: file
        #type: s3
  service:
    port: 9122
  resources: {}
  securityContext: {}
  hpa:
    enabled: false
  nodeEnvironment: production 
migrations: 
  enabled: true
  deployment:
    podAnnotations: {}
    image: tidepool/platform-migrations:develop-e95a3af6080aab5b845d1531015f0c5fd7134f80
  resources: {}
  securityContext: {}
  hpa:
    enabled: false
hydrophone:
  iamRole: ""
  deployment:
    podAnnotations: {}
    image: tidepool/hydrophone:develop-0683c6ba2c75ffd21ac01cd577acfeaf5cd0ef8f
    env:
      fromAddress: "Tidepool <noreply@tidepool.org>"                      # from address for emails that we send
      bucket: "asset" 
  service:
    port: 9157
  resources: {}
  securityContext: {}
  hpa:
    enabled: false
