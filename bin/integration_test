#!/bin/bash -xv
# This script is used to run integration tests of a new image of a service within an existing Kubernetes cluster.
#
# Pre-requisites:
# 1) Set up a wildcard domain in Route53 for all *.integration-test.tidepool.org -> integration test K8s cluster
# 2) In the K8s cluster, install helm and weave flux. This will install the (unconfigured) API gateway.

# This script
# 1) creates a declarative description of the test settings in the config repo;
# 2) spins up a new "environment" inside an existing Kubernetes cluster;
# 3) runs the integration test using Ghost Inspector;
# 4) frees the resources used in Kubernetes to run the test;
# 5) captures the test results and commits them to the repo; and,
# 6) returns an exit status code of 1 for test failure and 0 for test success.

# The name of the service to be tested, e.g hydrophone, blip, auth, image.
SERVICE=${1:-hydrophone}

# The tag of the image to be tested, e.g. "develop-657ba6265ad38ce7c61be77b5642e99c0ede6945"
TAG=${2:-develop-657ba6265ad38ce7c61be77b5642e99c0ede6945}

# The base environment for the tests.  This determines which versions of the OTHER services are to be used in the test.
BASE_ENVIRONMENT=${3:-develop} # other options are "master", "released"

# The protocol to test
PROTOCOL=${4:-http}

# The Git config repo.
CONFIGREPO=${5:-git@github.com:tidepool-org/dev-ops}

# The path within the config repo to the environments
CONFIGPATH=${6:-clusters/integration-test/flux/environments}

# Generate a unique suffix for the environment name
SUFFIX=$(date | md5 | head -c8)

# The current date in a format that can be used in a file name and a url component
DATE=$(date +%F)

# Compose the emphemeral environment name that can be used in a file name and a url component
ENVIRONMENT=${DATE}-${SERVICE}-${SUFFIX}

# The URL at which the test environment can be reached.
CLUSTER_URL=${PROTOCOL}://${ENVIRONMENT}.integration-test.tidepool.org

# The directory that the script started in
CURDIR=$(pwd)

# Temporary directory to perform work
TMPDIR=$(mktemp -d "./zombie.XXXXXXXXX")

# The ID of the ghost inspector suite to run
GHOST_SUITE_ID=5cf5ba3f9ffa2f2438ed2e0f

# The Tidpool API key for Ghost Inspector
GHOST_API_KEY=1d903bbbe266b0b560b80a5dff6659cfdf8aec8f

# The URL of the test runner
TESTURL="https://api.ghostinspector.com/v1/suites/$GHOST_SUITE_ID/execute/?apiKey=$GHOST_API_KEY&startUrl=${CLUSTER_URL}"

# The file in which to store the test results
RESULTFILE=ghostinspector.json

# start services from within top of CONFIG rep
function start_services()
{
    cd $TMPDIR
    git clone ${CONFIGREPO}
    cd $(echo -n ${CONFIGREPO} | sed -e "s#.*/##")/${CONFIGPATH}
    subdir=ephemeral/${DATE}/${SERVICE}-${SUFFIX}
    mkdir -p ${subdir}
    cp -r ${BASE_ENVIRONMENT}/* ${subdir}/ 
    cd ${subdir}

    YQ="docker run -v ${PWD}:/workdir mikefarah/yq yq"
    ${YQ} w -i tidepool-helmrelease.yaml metadata.annotations[flux.weave.works/automated] false
    ${YQ} w -i tidepool-helmrelease.yaml spec.values.${SERVICE}.image tidepool/${SERVICE}:${TAG}
    ${YQ} w -i tidepool-helmrelease.yaml spec.releaseName tidepool-${ENVIRONMENT}
    ${YQ} d -i tidepool-helmrelease.yaml metadata.annotations[flux.weave.works/tag.${SERVICE}]
    ${YQ} w -i mongodb-helmrelease.yaml spec.releaseName mongo-${ENVIRONMENT}

    # Update namespace
    for file in $(find . -name \*.yaml -print)
    do
        if grep "kind" $file | egrep "kind: +Namespace" >/dev/null
        then
            ${YQ} w -i $file metadata.name ${ENVIRONMENT}
        else
            ${YQ} w -i $file metadata.namespace ${ENVIRONMENT}
        fi
        echo $file
        cat $file
    done
    exit
    
    # Save the results to GitHub.  This repo is polled by Weave Flux, which will create the test environment in the cluster.
    git add .
    git commit -m "Creating integration test environment ${ENVIRONMENT} to test ${SERVICE}:${TAG} with base ${BASE_ENVIRONMENT}."
    git pull --rebase
    git push

    # XXX We should poll a readiness port instead
    echo "waiting for services to become ready."
    sleep 300
}

# Stop and free cluster resources
function stop_services()
{
    for file in $(find . -name \*.yaml -print)
    do
	    mv $file $file.off
    done
    git add .
    git commit -m "Turn off ${ENVIRONMENT} by rename .yaml files to .yaml.off."
    git pull --rebase
    git push
}

# run integration tests, return 0 iff tests succeed
function run_tests()
{
    curl ${TESTURL} | python3 -m json.tool > ${RESULTFILE}
    cat ${RESULTFILE}
    grep -c '"passing":false' ${RESULTFILE}
    return $?
}

#clean up local file system
function cleanup()
{
    cd $CURDIR
    rm -rf $TMPDIR
}

start_services
run_tests
result=$?
stop_services
cleanup
exit $result
