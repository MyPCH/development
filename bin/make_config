#!/bin/bash
#
# Create Tidepool GitOps config repo
#
# Usage: $0 ${REMOTE_REPO}


red=`tput setaf 1`
green=`tput setaf 2`
magenta=`tput setaf 5`
reset=`tput sgr0`

REMOTE_REPO=${1:-$REMOTE_REPO}

if [ -z "$REMOTE_REPO" ]
then
        echo "${red}[x] must provide REMOTE_REPO${reset}"
        exit 1
fi

if [[ $REMOTE_REPO = git@github.com* ]]
then
        remote=$REMOTE_REPO
else
        remote="git@github.com:tidepool-org/$REMOTE_REPO"
fi

if [ -z "$GITHUB_TOKEN" ]
then
        echo "${red}[x] \$GITHUB_TOKEN required.${reset}"
        exit
fi

go get github.com/subfuzion/envtpl/...

remotebase=$(basename $remote)

# create temporary workspace to clone Git repos into
mytmpdir=`mktemp -d 2>/dev/null || mktemp -d -t 'mytmpdir'`
trap "rm -rf $mytmpdir" EXIT
cd $mytmpdir

# clone quickstart
git clone git@github.com:/tidepool-org/tidepool-quickstart
QUICKSTART_DIR=$(realpath ./tidepool-quickstart)

git clone git@github.com:/tidepool-org/development
(cd development; git checkout k8s)
DEV_DIR=$(realpath development)
CHART_DIR=$DEV_DIR/charts/tidepool/0.1.7

# clone config repo
git clone $remote
cd $remotebase
CONFIG_DIR=$(realpath .)

if [ ! -f values.yaml ]
then
	echo "${red}[x] No values.yaml file.  Create one with make_values.${reset}"
	exit 1
fi

# reset config directory
mv values.yaml  $mytmpdir/
if [ $(ls | wc -l) -ne 0 ]
then
	echo "${red}WARNING: will remove prior contents (except values.yaml)?${reset}"
	read -p "${red}Are you sure?${reset} " -n 1 -r
	if [[ ! $REPLY =~ ^[Yy]$ ]]
	then
    		exit 1
	fi
	echo
	echo "${magenta}[√] resetting config repo${reset}"
	rm -rf pkgs
fi
mv $mytmpdir/values.yaml .

# extract values to use for templating
export ClusterName=$(yq r values.yaml cluster.metadata.name)
export Region=$(yq r values.yaml cluster.metadata.region)
export config=$(yq r values.yaml -j)

echo "${magenta}[√] creating manifests for cluster $ClusterName in repo $remote${reset}"

# run template processor to create non-Tidepool services
cd $QUICKSTART_DIR

dirs=""
for dir in $(ls pkgs)
do
	enabled=$(yq r values.yaml pkgs.$dir.enabled)
	if [ "$enabled" == "true" ]
	then
		dirs="${dirs} pkgs/$dir"
        fi
done
echo "${magenta}[√] creating namespaces and package manifests${reset}"
for dir in namespaces $dirs
do
  for file in $(find $dir -type f -print)
  do
	mkdir -p $CONFIG_DIR/$(dirname $file)
	if [ "${file: -5}" == ".tmpl" ]
	then
		echo ${file%.tmpl}
		envtpl $file >$CONFIG_DIR/${file%.tmpl}
        elif [ "${file: -12}" == "-secret.yaml" ]
	then
		echo >/dev/null
        elif [ "${file: -5}" == ".yaml" ]
	then
		echo $file
		cp $file $CONFIG_DIR/$file
	elif [ "${file: -8}" == ".jsonnet" ]
	then
		echo ${file%.jsonnet}
		jsonnet --tla-code config="$config" $file | yq r - > $CONFIG_DIR/${file%.jsonnet}
	fi
  done
done

echo "${magenta}[√] creating eksctl ClusterConfig manifest${reset}"
echo "config.yaml"
jsonnet --tla-code config="$config" ${QUICKSTART_DIR}/eksctl/cluster_config.jsonnet | yq r - > $CONFIG_DIR/config.yaml

echo "${magenta}[√] creating tidepool environment manifests${reset}"
# create Tidepool environments
environments=$(yq r values.yaml environments | sed -e "/^  .*/d" -e s/:.*//)
for env in $environments
do
	envdir=$CONFIG_DIR/environments/$env
	mkdir -p $envdir

	echo "${magenta}[√] creating $env environment manifests${reset}"
	echo environmens/$env/tidepool-helmrelease.yaml
	echo namespaces/${env}-namespace.yaml
	jsonnet --tla-code config="$config" --tla-str namespace=$env  ${QUICKSTART_DIR}/tidepool/tidepool-helmrelease.jsonnet | yq r - > $envdir/tidepool-helmrelease.yaml
	jsonnet --tla-code config="$config" --tla-str namespace=$env  ${QUICKSTART_DIR}/tidepool/tidepool-namespace.jsonnet | yq r - > $CONFIG_DIR/namespaces/${env}-namespace.yaml
done

echo "${magenta}[√] committing changes${reset}"
# commit changes to repo
cd $CONFIG_DIR
git add .
git commit -m "Added tidepool environments"
git push
cd /

# clean up
rm -rf $mytmpdir

echo "${magenta}[√] done${reset}"
