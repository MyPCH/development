#!/usr/local/bin/python3

import csv
import json
import os
import yaml

import pickle
import os.path

from subprocess import Popen, PIPE
from dotenv import load_dotenv
import environs

GITDIR="/Users/derrickburns/go/src/github.com/tidepool-org/dev-ops/bar"

envs = [ "dev", "stg", "int", "prd" ]

def date_from(row):
    return row[6]

def file_from(mapping):
    return mapping[6]

def name_from(mapping):
    return mapping[3]

def path_from(mapping):
    return mapping[7]

def svc_from(row):
    return row[3]

def kind_from(row):
    return row[0]

def checkout(branch):
    git_command = ['/usr/bin/git', 'checkout', branch]
    git_query = Popen(git_command, cwd=GITDIR, stdout=PIPE, stderr=PIPE)
    (git_status, error) = git_query.communicate()
    if git_query.poll() == 0:
        return True
    print(git_status, error)
    return False

def env_var_from(branch,filename,path):
    checkout(branch)
    e = environs.Env()
    e.read_env(GITDIR + '/' + filename, recurse=False)
    try:
        value = e(path)
        return value
    except environs.EnvError:
        print(e)
        exit()


def json_var_from(branch,filename,path):
    parts = path.split(".")
    checkout(branch)
    with open(GITDIR + '/' + filename, 'r') as content_file:
        content = content_file.read()
        for part in parts:
            if part == '':
                obj = json.loads(content)
            else:
                if part in obj:
                    obj = obj[part]
                else:
                    obj = ""
                    break
        value = json.dumps(obj)
        return value

def svc_from_mapping(mapping):
    return mapping[5]

def key_from(mapping):
    return mapping[4]

results = dict()

def output(env, kind, name, key, value):
    if env not in results:
        results[env] = dict()
    if kind not in results[env]:
        results[env][kind] = dict()
    if name not in results[env][kind]:
        results[env][kind][name] = dict()
    results[env][kind][name][key] = value   

for env in envs:
    with open("/Users/derrickburns/Downloads/" + env + '.csv', newline='') as f:
        reader = csv.reader(f)
        next(reader)
        for row in reader:
            date=date_from(row)
            svc=svc_from(row)
            with open( "/Users/derrickburns/Downloads/" + 'map.csv', newline='') as g:
                mappings = csv.reader(g)
                next(mappings)
                for mapping in mappings:
                    map_svc = svc_from_mapping(mapping)
                    if map_svc != svc:
                        continue
                    filename=file_from(mapping)
                    name=name_from(mapping)
                    path = path_from(mapping)
                    kind = kind_from(mapping)
                    key = key_from(mapping)
                    branch="{svc}/{env}/{date}".format(env=env, svc=svc, date=date)
                    if filename.endswith(".sh"):
                        value=env_var_from(branch, filename, path )
                    else:
                        value= json_var_from(branch, filename, path)
                    output(env, kind, name, key, value)
print(yaml.dump(results))
