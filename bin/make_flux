#!/bin/bash 
#
# Create EKS cluster and install flux
#
# Requires config.yaml file in REMOTE_REPO.
# Requires values.yaml file in REMOTE_REPO.
#
# Depends on eksctl, git, yq,  mktemp
#
# Usage: $0 ${REMOTE_REPO}

set -o pipefail

red=`tput setaf 1`
green=`tput setaf 2`
magenta=`tput setaf 5`
reset=`tput sgr0`

REMOTE_REPO=${1:-$REMOTE_REPO}

if [ -z "$REMOTE_REPO" ]
then
	echo "${red}must provide REMOTE_REPO${reset}"
	exit 1
fi

if [[ $REMOTE_REPO = git@github.com* ]]
then
	remote=$REMOTE_REPO
else
	remote="git@github.com:tidepool-org/$REMOTE_REPO"
fi

if [ -z "$GITHUB_TOKEN" ]
then
	echo "${red}\$GITHUB_TOKEN required.${reset}"
	exit
fi

remotebase=$(basename $remote)

# create temporary workspace to clone Git repos into
mytmpdir=`mktemp -d 2>/dev/null || mktemp -d -t 'mytmpdir'`
trap "rm -rf $mytmpdir" EXIT
cd $mytmpdir

# clone quickstart
git clone git@github.com:/tidepool-org/tidepool-quickstart 
QUICKSTART_DIR=$(realpath ./tidepool-quickstart)

# clone config repo
git clone $remote 
cd $remotebase
CONFIG_DIR=$(realpath .)


# extract values to use for templating
export config=$(yq r values.yaml -j)
export email=$(yq r values.yaml -j email | sed -e 's/"//g')
export cluster=$(yq r values.yaml -j cluster.metadata.name | sed -e 's/"//g')

eksctl get cluster --name $cluster
if [ $? -ne 0 ]
then
	echo "${red}[x] cluster $cluster does not exist. Create with make_cluster.${reset}"
	exit 1
fi

# create cluster, install flux into cluster
echo "${magenta}[√] installing flux in cluster $cluster${reset}"
export EKSCTL_EXPERIMENTAL=true
unbuffer eksctl install flux -f $CONFIG_DIR/config.yaml --git-url=${remote}.git --git-email=$email --git-label=$cluster  | tee  $mytmpdir/eksctl.out

if [  $? -ne 0 ]
then
	exit 1
fi

git pull

echo "${magenta}[√] saving ca pem and key to AWS secrets manager${reset}"
DIR=$(cat $mytmpdir/eksctl.out | grep "Public key infrastructure" | sed -e 's/^.*"\(.*\)".*$/\1/')
aws secretsmanager describe-secret --secret-id $cluster/flux/ca.pem 2>/dev/null
if [ $? -ne 0 ]
then
    aws secretsmanager create-secret --name $cluster/flux/ca.pem --secret-string "$(cat $DIR/ca.pem)"
    if [ $? -ne 0 ]
    then
	    echo "${red}[x] failed to create ca.pem to AWS${reset}"
	    exit 1
    fi
    aws secretsmanager create-secret --name $cluster/flux/ca-key.pem --secret-string "$(cat $DIR/ca-key.pem)"
    if [ $? -ne 0 ]
    then
	    echo "${red}[x] failed to create ca-key.pem to AWS${reset}"
	    exit 1
    fi
else
    aws secretsmanager update-secret --secret-id $cluster/flux/ca.pem --secret-string "$(cat $DIR/ca.pem)"
    if [ $? -ne 0 ]
    then
	    echo "${red}[x] failed to update ca.pem to AWS${reset}"
	    exit 1
    fi
    aws secretsmanager update-secret --secret-id $cluster/flux/ca-key.pem --secret-string "$(cat $DIR/ca-key.pem)"
    if [ $? -ne 0 ]
    then
	    echo "${red}[x] failed to update ca-key.pem to AWS${reset}"
	    exit 1
    fi
fi

make_cert $cluster

key=$(fluxctl --k8s-fwd-ns=flux identity)

reponame="$(echo $remote | cut -d/ -f2 | sed -e 's/\.git//')"

echo "${magenta}[√] authorizing access to $remote${reset}"
curl -X POST -i\
	-H"Authorization: token $GITHUB_TOKEN"\
	--data @- https://api.github.com/repos/tidepool-org/$reponame/keys << EOF
{

	"title" : "flux key for $cluster created by make_flux",
	"key" : "$key",
	"read_only" : false
}
EOF

# pull changes to config repo
git pull

# update flux and helm 
echo "${magenta}[√] updating flux and flux-helm-operator manifests${reset}"
if [ -f flux/flux-deployment.yaml ]
then
	yq r flux/flux-deployment.yaml -j > $mytmpdir/flux.json
	yq r flux/helm-operator-deployment.yaml -j > $mytmpdir/helm.json
        jsonnet  --tla-code-file flux="$mytmpdir/flux.json"  --tla-code-file helm="$mytmpdir/helm.json" $QUICKSTART_DIR/flux/flux.jsonnet >$mytmpdir/updated.json
        yq r $mytmpdir/updated.json flux >flux/flux-deployment-updated.yaml
        yq r $mytmpdir/updated.json helm >flux/helm-operator-deployment-updated.yaml
	mv flux/flux-deployment.yaml flux/flux-deployment.yaml.orig
	mv flux/helm-operator-deployment.yaml flux/helm-operator-deployment.yaml.orig
fi

echo "${magenta}[√] commiting repo${reset}"
# commit changes to repo
git add .
git commit -m "Added tidepool environments"
git push
cd /
# clean up
rm -rf $mytmpdir

echo "${magenta}[√] done${reset}"

