#!/bin/bash
#
# Create configuration repo from single values files.
#

if [ -z "$FLUX_DIR" ]
then
	echo "\$FLUX_DIR required."
	exit
fi

if [ -z "$DEV_REPO" ]
then
	echo "\$DEV_REPO required."
	exit
fi

if [ -z "$CONFIG_DIR" ]
then
	echo "\$CONFIG_DIR required."
	exit
fi

if [ -z "$VALUES_FILE" ]
then
	echo "\$VALUES_FILE required."
	exit
fi

if [ -z "$CLUSTER_DIR" ]
then
	echo "\$CLUSTER_DIR required."
	exit
fi

if [ -z "ENVIRONMENTS" ]
then
	echo "Warning: No \$ENVIRONMENTS configured."
fi

cd $DEV_REPO

CHART_DIR=${DEV_REPO}/charts

CONFIGURATOR_CHART_DIR=${CHART_DIR}/configurator
CONFIGURATOR_TEMPLATE_DIR=${CONFIGURATOR_CHART_DIR}/templates

TIDEPOOL_CHART_DIR=${CHART_DIR}/tidepool
SHARED_CHART_DIR=${CHART_DIR}/shared
START_CHART_DIR=${CHART_DIR}/shared-start
FLUX_CHART_DIR=${CHART_DIR}/flux-repositories

mkdir -p $CLUSTER_DIR
cd $CONFIG_DIR

# create cluster config 
helm template -f ${VALUES_FILE} ${CONFIGURATOR_CHART_DIR} -x ${CONFIGURATOR_TEMPLATE_DIR}/config.yaml | tail -n +4 > ${CLUSTER_DIR}/config.yaml 

mkdir -p $FLUX_DIR
cd ${FLUX_DIR}

# expand shared services helmreleases
# we expand them to aid up updating the individual services
helm template -f ${VALUES_FILE} ${SHARED_CHART_DIR} >shared-manifests.yaml
helm template -f ${VALUES_FILE} ${START_CHART_DIR}  >start-manifests.yaml
helm template -f ${VALUES_FILE} --namespace flux ${FLUX_CHART_DIR} >flux-repositories.yaml
helm template -f ${VALUES_FILE} ${CONFIGURATOR_CHART_DIR} -x ${CONFIGURATOR_TEMPLATE_DIR}/tidepool-helmrelease.yaml > tidepool-manifests.yaml

# create environments
mkdir -p environments
cd environments
for ENVIRONMENT in $ENVIRONMENTS
do
  mkdir -p $ENVIRONMENT
  external_secret <(helm template -f ${VALUES_FILE} --set global.secrets.enabled=true  --namespace $ENVIRONMENT \
	  ${TIDEPOOL_CHART_DIR}) dryrun ${CLUSTER_NAME} encoded  | yq 'filter(.kind == "Secret")' >$ENVIRONMENT/external-secrets.yaml
  helm template -f ${VALUES_FILE} ${TIDEPOOL_CHART_DIR} | yq 'filter(.kind == "Namespace")' > $ENVIRONMENT/namespace.yaml
  helm template -f ${VALUES_FILE} ${TIDEPOOL_CHART_DIR} | yq 'filter(.kind == "ConfigMap")' > $ENVIRONMENT/configmaps.yaml
done

CREATE=$(yq read ${VALUES_FILE} global.repo.create)

cd $CONFIG_DIR
if [ "$CREATE" == "true" ]
then
  if [ ! -d ".git" ]
  then
    git init
  fi
  hub create -d "Creating K8s config repo." $GITHUB_ACCOUNT/$GIT_REPO_NAME
fi
git add .
git commit -m "Initial configuration"

PUSH=$(yq read ${VALUES_FILE} global.github.push)
if [ "$PUSH" == "true" ]
then
  git push --set-upstream origin master
fi
