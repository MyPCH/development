#!/bin/bash
#
# Create configuration repo from single values files.
#

if [ -z "$FLUX_DIR" ]
then
	echo "\$FLUX_DIR required."
	exit
fi

if [ -z "$DEV_REPO" ]
then
	echo "\$DEV_REPO required."
	exit
fi

if [ -z "$CONFIG_DIR" ]
then
	echo "\$CONFIG_DIR required."
	exit
fi

if [ -z "$VALUES_FILE" ]
then
	echo "\$VALUES_FILE required."
	exit
fi

if [ -z "$ENVIRONMENTS" ]
then
	echo "\$ENVIRONMENTS required."
	exit
fi

if [ -z "$CLUSTER_DIR" ]
then
	echo "\$CLUSTER_DIR required."
	exit
fi

cd $DEV_REPO

CHART_DIR=${DEV_REPO}/charts/configurator
TEMPLATE_DIR=${CHART_DIR}/templates

mkdir -p $CLUSTER_DIR
cd $CONFIG_DIR

# create cluster config 
helm template -f ${VALUES_FILE} ${CHART_DIR} -x ${TEMPLATE_DIR}/config.yaml | tail -n +4 > ${CLUSTER_DIR}/config.yaml 

mkdir -p $FLUX_DIR
cd ${FLUX_DIR}

# create and store secrets 
external_secret <(helm template -f ${VALUES_FILE} ${CHART_DIR} -x ${TEMPLATE_DIR}/secrets.yaml) dryrun ${CLUSTER_NAME} encoded >external-secrets.yaml

# create shared services helmreleases
helm template -f ${VALUES_FILE} ${CHART_DIR} -x ${TEMPLATE_DIR}/shared-helmrelease.yaml >shared-helmrelease.yaml
helm template -f ${VALUES_FILE} ${CHART_DIR} -x ${TEMPLATE_DIR}/shared-start-helmrelease.yaml >shared-start-helmrelease.yaml

helm template -f ${VALUES_FILE} --namespace flux ${DEV_REPO}/charts/flux-repositories >flux-repositories.yaml

# create environments
mkdir -p environments
cd environments
for ENVIRONMENT in ${ENVIRONMENTS}
do
  mkdir -p $ENVIRONMENT
  helm template -f ${VALUES_FILE} ${CHART_DIR} -x ${TEMPLATE_DIR}/namespace.yaml > $ENVIRONMENT/namespace.yaml
  helm template -f ${VALUES_FILE} ${CHART_DIR} -x ${TEMPLATE_DIR}/shoreline-configmap.yaml > $ENVIRONMENT/shoreline-configmap.yaml
  helm template -f ${VALUES_FILE} ${CHART_DIR} -x ${TEMPLATE_DIR}/tidepool-helmrelease.yaml > $ENVIRONMENT/tidepool-helmrelease.yaml
done

CREATE=$(yq read ${VALUES_FILE} global.repo.create)

cd $CONFIG_DIR
if [ "$CREATE" == "true" ]
then
  if [ ! -d ".git" ]
  then
    git init
  fi
  hub create -d "Creating K8s config repo." $GITHUB_ACCOUNT/$GIT_REPO_NAME
fi
git add .
git commit -m "Initial configuration"

PUSH=$(yq read ${VALUES_FILE} global.github.push)
if [ "$PUSH" == "true" ]
then
  git push --set-upstream origin master
fi
