#!/bin/bash -xv
# Usage: $0 ${VALUES_FILE:-values.yaml}

. set_exports $*

cd $DEV_REPO
git checkout k8s

mkdir -p $CONFIG_REPO
cd $CONFIG_REPO

# create cluster config 
helm template -f ${VALUES_FILE} ${CHART_DIR} -x ${TEMPLATE_DIR}/config.yaml > config.yaml

mkdir -p $FLUX_REPO
cd ${FLUX_REPO}

# create and store secrets 
external_secret <(helm template -f ${VALUES_FILE} ${CHART_DIR} -x ${TEMPLATE_DIR}/secrets.yaml) dryrun ${CLUSTER_NAME} encoded >external-secrets.yaml

# create shared services helmreleases
helm template -f ${VALUES_FILE} ${CHART_DIR} -x ${TEMPLATE_DIR}/shared-helmrelease.yaml >shared-helmrelease.yaml
helm template -f ${VALUES_FILE} ${CHART_DIR} -x ${TEMPLATE_DIR}/shared-start-helmrelease.yaml >shared-start-helmrelease.yaml

helm template -f ${VALUES_FILE} --namespace flux ${DEV_REPO}/charts/flux-repositories >flux-repositories.yaml

# create environments
mkdir -p environments
cd environments
for ENVIRONMENT in ${ENVIRONMENTS}
do
  mkdir -p $ENVIRONMENT
  helm template -f ${VALUES_FILE} ${CHART_DIR} -x ${TEMPLATE_DIR}/namespace.yaml > $ENVIRONMENT/namespace.yaml
  helm template -f ${VALUES_FILE} ${CHART_DIR} -x ${TEMPLATE_DIR}/shoreline-configmap.yaml > $ENVIRONMENT/shoreline-configmap.yaml
  helm template -f ${VALUES_FILE} ${CHART_DIR} -x ${TEMPLATE_DIR}/tidepool-helmrelease.yaml > $ENVIRONMENT/tidepool-helmrelease.yaml
done

CREATE=$(yq read ${VALUES_FILE} global.git.create)
if [ "$CREATE" == "true" ]
then
# create config repo
  cd $CONFIG_REPO
  git init
fi
git add .
git commit -m "Initial configuration"
git remote add origin git@github.com:${GITHIB_ACCOUNT}/${CLUSTER_REPO_NAME}.git

PUSH=$(yq read ${VALUES_FILE} global.github.push)
if [ "$PUSH" == "true" ]
then
  git push
fi
