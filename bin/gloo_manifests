#!/usr/local/bin/python3
# Generate gloo manifests files from Ambassador Mapppings

import json
import os
import subprocess
import sys
import yaml

CORS_POLICY_STRING = """
{
    "allowCredentials": true,
    "allowHeaders": [
        "authorization",
        "content-type",
        "x-tidepool-session-token",
        "x-tidepool-trace-request",
        "x-tidepool-trace-session"
    ],
    "allowMethods": [
        "GET",
        "POST",
        "PUT",
        "PATCH",
        "DELETE",
        "OPTIONS"
    ],
    "allowOriginRegex": [
        "*"
    ],
    "exposeHeaders": [
        "x-tidepool-session-token",
        "x-tidepool-trace-request",
        "x-tidepool-trace-session"
    ],
    "maxAge": "300s"
}
"""
CORS_POLICY=json.loads(CORS_POLICY_STRING)

def virtual_service_basename(host):
    """Return the Gloo virtual service name."""
    return host.replace("default-", "").replace(".tidepool.org", "") 

def tidepool_tls_secret():
    """Return the Kubernetes name and namespace for the secret containing the TLS cert and key
    for the domain (tidepool-org.org) being served."""
    secret = dict()
    secret["name"] = "tidepool-org"
    secret["namespace"] = "default"
    return secret

def gloo_metadata(hostname):
    """Return metadata for virtual service"""
    metadata = dict()
    metadata["name"] = hostname
    metadata["namespace"] = "{{- .Release.Namespace -}}"
    return metadata

def gloo_domains(hostname):
    """Return domains"""
    domains = list()
    domains.append(hostname)
    return domains

def gloo_sort_key(route):
    matcher = route["matcher"]
    if "regex" in matcher:
        return len(matcher["regex"])
    elif "prefix" in matcher:
        return len(matcher["prefix"])
    elif "exact" in matcher:
        return len(matcher["exact"])
    else:
        return 0

def gloo_ordered_routes(routes):
    """Return a sorted list of http routes from least general to most general."""
    # sort by length of prefix/regex from longest to
    return sorted(routes, key=gloo_sort_key, reverse=True)

def gloo_virtual_host(routes, hostname, cors):
    """Return a virtual host"""
    vh = dict()
    vh["domains"] = gloo_domains(hostname)
    vh["name"] = hostname 
    vh["routes"] = gloo_ordered_routes(routes)
    if cors is not None:
        vh["corsPolicy"] = cors
    return vh

def tidepool_external_hostnamee_from_base(base):
    return "{{.Release.Namespace}}-" + base + ".tidepool.org"

def gloo_virtual_service_ssl_domains(hostname):
    """Return ssl domains"""
    domains = list()
    domains.append(hostname)
    return domains

def gloo_virtual_service_ssl_config(hostname):
    """Return the ssl config for the hostname"""
    config = dict()
    config["sniDomains"] = gloo_virtual_service_ssl_domains(hostname)
    config["secretRef"] = tidepool_tls_secret()
    return config

def gloo_virtual_service_spec(routes, hostname, cors, useSSL):
    spec = dict()
    if useSSL:
        spec["sslConfig"] = gloo_virtual_service_ssl_config(hostname)
    spec["virtualHost"] = gloo_virtual_host(routes, hostname, cors)
    return spec

def gloo_virtual_service(routes, hostname, cors, useSSL):
    """Return a Gloo virtual service"""
    if len(routes) > 0:
        virtual_service = dict()
        virtual_service["apiVersion"] = "gateway.solo.io/v1"
        virtual_service["kind"] = "VirtualService"
        virtual_service["metadata"] = gloo_metadata(hostname)
        virtual_service["spec"] = gloo_virtual_service_spec(routes, hostname, cors, useSSL)
        return virtual_service
    else:
        return None

def gloo_methods(doc):
    methods = list()
    if "method_regex" in doc and doc[ "method_regex"]:
        methods = doc["method"].split("|")
    else:
        methods.append(doc["method"])
    return methods

def gloo_matcher(doc):
    """Return a gloo matcher"""
    matcher = dict()
    if "prefix_regex" in doc and doc[ "prefix_regex"]:
        matcher["regex"] = doc["prefix"]
    elif "prefix" in doc and doc["prefix"]:
        matcher["prefix"] = doc["prefix"]
    matcher["methods"] = gloo_methods(doc)
    return matcher

def gloo_prefix_rewrite(path):
    """Return a gloo prefix rewrite rule"""
    prefix_rewrite = dict()
    prefix_rewrite["prefixRewrite"] = path
    return prefix_rewrite

def gloo_route_plugins(doc):
    """Return a gloo routePlugins"""
    routePlugins = dict()
    if "rewrite" not in doc:
        routePlugins["prefixRewrite"] = gloo_prefix_rewrite("/")
    elif doc["rewrite"] != "":
        routePlugins["prefixRewrite"] = gloo_prefix_rewrite(doc["rewrite"])
    else:  
        return None
    return routePlugins

def gloo_upstream(doc):
    """Return a gloo upstream."""
    upstream = dict()
    s = doc["service"]
    name = doc["name"]
    if ":" in s:
        (svc_with_namespace,port) = s.split(":")
    else:
        svc_with_namespace = s
    svc = svc_with_namespace.replace(".default","")
    
    upstream["name"] = "{{- .Release.Namespace -}}" + "-" + svc + "-" + port
    upstream["namespace"] = "{{- .Release.Namespace -}}"
    return upstream

def gloo_single(doc):
    """Return a gloo single."""
    single = dict()
    single["upstream"] = gloo_upstream(doc)
    return single

def gloo_route_action(doc):
    """Return a gloo routeAction"""
    routeAction = dict()
    routeAction["single"] = gloo_single(doc)
    return routeAction

def gloo_route(doc):
    """Return a gloo route"""
    route = dict()
    route["matcher"] = gloo_matcher(doc)
    route_plugins = gloo_route_plugins(doc)
    if route_plugins is not None:
        route["routePlugins"] = route_plugins
    route["routeAction"] = gloo_route_action(doc)
    return route

def append_gloo_route(routes_dict, doc):
    """Appends a gloo route to a dictionary of routes whose keys are the virtual hosts."""
    host = doc["host"]
    if host not in routes_dict:
        routes_dict[host] = list()
    routes_dict[host].append(gloo_route(doc))

def gloo_routes_dict(mappings):
    """Return the Gloo http routes from a set of Services with Ambassador annotations."""
    routes_dict = dict()
    for mapping in mappings:
        append_gloo_route(routes_dict, mapping)
    return routes_dict

def gloo_gateway_proxy_service_labels():
    labels = dict()
    labels["app"] = "gloo"
    labels["gloo"] = "gateway-proxy"
    return labels

def gloo_gateway_proxy_service_metadata(useSSL):
    metadata = dict()
    metadata["labels"] = gloo_gateway_proxy_service_labels()
    suffix = "-ssl" if useSSL else ""
    metadata["name"] = "gateway-proxy" + suffix
    metadata["namespace"] = "gloo-system"
    return metadata

def gloo_gateway_proxy_service_ports(useSSL):
    ports = list()
    port = dict()
    if useSSL:
        port["name"] = "https"
        port["port"] = 443
        port["protocol"] = "TCP"
        port["targetPort"] = 8443
    else:
        port["name"] = "http"
        port["port"] = 80
        port["protocol"] = "TCP"
        port["targetPort"] = 8080
    ports.append(port)
    return ports

def gloo_gateway_proxy_service_selector():
    selector = dict()
    selector["gloo"] = "gateway-proxy"
    return selector

def gloo_gateway_proxy_service_spec(service_type, useSSL):
    spec = dict()
    spec["ports"] = gloo_gateway_proxy_service_ports(useSSL)
    spec["selector"] = gloo_gateway_proxy_service_selector()
    if service_type == "elb":
        spec["externalTrafficPolicy"] = "Cluster"
        spec["type"] = "LoadBalancer"
    elif service_type == "nlb":
        spec["externalTrafficPolicy"] = "Cluster"
        spec["type"] = "LoadBalancer"
        annotations = dict()
        annotations["service.beta.kubernetes.io/aws-load-balancer-type"] = "nlb"
        spec["annotations"] = annotations
    elif service_type == "cluster":
        spec["type"] = "ClusterIP"
    else:
        print("bad service type")
        exit()
    return spec

def gloo_internal_metadata(base):
    metadata = dict()
    metadata["name"] = "{{.Release.Namespace.}}-" + base + ".gateway-proxy.svc.cluster.local"
    metadata["namespace"] = "{{.Release.Namespace}}"
    return metadata

def gloo_internal_port():
    port = dict()
    port["port"] = 80
    return port

def gloo_internal_ports():
    ports = list()
    ports.append(gloo_internal_port())
    return ports

def gloo_internal_spec():
    spec = dict()
    spec["type"] = "ExternalName"
    spec["externalName"] = "gateway-proxy.gloo-system.svc.cluster.local"
    spec["ports"] = gloo_internal_ports()
    return spec

def gloo_internal_service(base):
     service = dict()
     service["apiVersion"] = "v1"
     service["kind"] = "Service"
     service["metadata"] = gloo_internal_metadata(base)
     service["spec"] = gloo_internal_spec()
     return service

def gloo_gateway_metadata(useSSL):
    metadata = dict()
    suffix = "-ssl" if useSSL else ""
    metadata["name"] = "gateway" + suffix
    metadata["namespace"] = "gloo-system"
    return metadata

def gloo_gateway(useSSL):
    gateway = dict()
    gateway["apiVersion"] = "gateway.solo.io/v1"
    gateway["kind"] = "Gateway"
    gateway["metadata"] = gloo_gateway_metadata(useSSL)
    gateway["bindAddress"] = '::'
    if useSSL:
        gateway["bindPort"] = 8443
        gateway["useProxyProto"] = False # XXX check this
    else:
        gateway["bindPort"] = 8080
        gateway["useProxyProto"] = False # XXX check this
    gateway["ssl"] = useSSL
    return gateway

def gloo_gateway_proxy_service(service_type, useSSL):
    service = dict()
    service["apiVersion"] = "v1"
    service["kind"] = "Service"
    service["metadata"] = gloo_gateway_proxy_service_metadata(useSSL)
    service["spec"] = gloo_gateway_proxy_service_spec(service_type, useSSL)
    return service

def gloo_external_hostname(base):
    return  "{{.Release.Namespace}}-" + base + ".tidepool.org"

def gloo_internal_hostname(base):
    return "{{.Release.Namespace}}-" + base + ".svc.cluster.local"

"""
Example output:
---
kind: Service
apiVersion: v1
metadata:
  name: api.gateway-proxy.svc.cluster.local
  namespace: qa1
spec:
  type: ExternalName
  externalName: gateway-proxy.gloo-system.svc.cluster.local
  ports:
  - port: 80
---
apiVersion: gateway.solo.io/v1
kind: Gateway
metadata:
  name: gateway-ssl
  namespace: gloo-system
spec:
  bindAddress: '::'
  bindPort: 8443
  ssl: true
  useProxyProto: false
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: gloo
    gloo: gateway-proxy
  name: gateway-proxy
  namespace: gloo-system
spec:
  externalTrafficPolicy: Cluster
  ports:
  - name: http
    port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    gloo: gateway-proxy
---
apiVersion: gateway.solo.io/v1
kind: VirtualService
metadata:
  name: api-vs-{{.Release.Namespace}}
  namespace: {{.Release.Namespace}}
spec:
  sslConfig:
    sniDomains:
    - {{ include "charts.host.api" . }}
    secretRef:
      name: tidepool-org
      namespace: default
  virtualHost:
    domains:
    - {{ include "charts.host.api" . }}
    name: {{.Release.Namespace}}.api
    routes:
    - matcher:
        prefix: /userservices/
      routeAction:
        single:
          upstream:
            name: {{.Release.Namespace}}-platform-user-{{ .Values.platformUser.port }}
            namespace: gloo-system
    - matcher:
        methods:
        - POST
        - GET
        - DELETE
        regex: /v1/users/[^/]+/images
      routeAction:
        single:
          upstream:
            name: {{.Release.Namespace}}-platform-image-{{ .Values.platformImage.port }}
            namespace: gloo-system
    - matcher:
        prefix: /dataservices/
      routeAction:
        single:
          upstream:
            name: {{.Release.Namespace}}-platform-data-{{ .Values.platformData.port }}
            namespace: gloo-system
      routePlugins:
        prefixRewrite:
          prefixRewrite: /
{{ end }}
"""

def add_manifest(manifest_dict, manifest, name):
    manifest_dict[name] = manifest

def gloo_manifests_from_mappings(mappings):
    gloo_manifest_dict = dict()
    for host,routes in gloo_routes_dict(mappings).items():
        base = virtual_service_basename(host)
        external_virtual_service = gloo_virtual_service(routes, gloo_external_hostname(base), CORS_POLICY, True)
        internal_virtual_service = gloo_virtual_service(routes, gloo_internal_hostname(base), None, False)
        add_manifest(gloo_manifest_dict, internal_virtual_service, base + "-internal-virtual-service")
        add_manifest(gloo_manifest_dict, external_virtual_service, base + "-external-virtual-service")
        add_manifest(gloo_manifest_dict, gloo_internal_service(base), base + "-gateway-proxy-internal")
    add_manifest(gloo_manifest_dict, gloo_gateway(False), "gateway")
    add_manifest(gloo_manifest_dict, gloo_gateway(True), "gateway-ssl")
    add_manifest(gloo_manifest_dict, gloo_gateway_proxy_service("elb", True), "gateway-proxy-service-ssl")
    add_manifest(gloo_manifest_dict, gloo_gateway_proxy_service("cluster", False), "gateway-proxy-service")
    return gloo_manifest_dict

def ambassador_services_from_directory(input_dir):
    helm = subprocess.Popen(['helm', 'template', input_dir], stdout=subprocess.PIPE)
    docs = yaml.load_all(helm.stdout, Loader=yaml.FullLoader)
    return ambassador_services_from(docs)

def write_manifests(manifests):
    print(yaml.dump(manifests, explicit_start = True, default_flow_style=False))

def main():
    write_manifests(gloo_manifests_from_mappings(yaml.safe_load(sys.stdin)))

if __name__ == "__main__":
    main()
