#!/bin/bash -eu
shopt -s extglob

DIR=$(cd $(dirname $(dirname ${0})); pwd)

usage() {
  cat <<EOF
=======================================================
USAGE: tidepool_docker command [service] [...additional args]

  commands:
    up [service]                    start and/or (re)build the entire tidepool stack or the specified service
    down                            shut down and remove the entire tidepool stack
    stop [service]                  shut down the entire tidepool stack or the specified service
    rm [service]                    stops and removes containers and volumes for the entire tidepool stack or the specified service
    restart [service]               restart the entire tidepool stack or the specified service
    pull [service]                  pull the latest images for the entire tidepool stack or the specified service
    logs [service]                  tail logs for the entire tidepool stack or the specified service

    rebuild [service]               rebuild and run image for all services in the tidepool stack
                                    or the specified service
                                    NOTE: the service(s) must have a 'build' property in the 'docker-compose.yml'
                                    file for this to have any effect.

    exec service [...cmds]          run arbitrary shell commands in the currently running service container
                                      example: 'tidepool_docker exec blip sh'
                                               (to enter a shell inside the blip container)
                                      example: 'tidepool_docker exec blip "ls -lR /app/node_modules/ | grep ^l | uniq"'
                                               (to list all symlinked npm packages, such as after yarn linking)

    link [node_service] package     yarn link a mounted package and restart the service
                                    NOTE: the package must be mounted into a root directory that matches it's name
                                      example: 'tidepool_docker link blip @tidepool/viz'
                                        - will link the package mounted at /@tidepool/viz and link the
                                          "@tidepool/viz" package in blip.

    unlink [node_service] package   yarn unlink a mounted package, reinstall the remote package, and restart
                                    NOTE: the package must be mounted into a root directory that matches it's name
                                      example: 'tidepool_docker unlink blip tideline'
                                        - will link the package mounted at /tideline and unlink
                                          the "tideline" package in blip

    yarn [node_service] [...cmds]   shortcut to run yarn commands against the specified Node.js-based service
                                    frontend node services are one of: [blip|viz|tideline|tidepool-platform-client]
                                    NOTE: tideline and tidepool-platform-client are optional volume mounts
                                    within the blip service
                                      example: 'tidepool_docker tideline install'
                                        ('install' is default yarn command, so it can be skipped here)
                                      example: 'tidepool_docker viz run stories'
                                        ('run' is implied in yarn scrips, so 'tidepool_docker viz stories' works too)
                                      example: 'tidepool_docker tidepool-platform-client run test'

    help                            show this help text

EOF
}

run_docker() { args="${@:1}" && (set_docker_env && docker ${args}) }

run_docker_compose() { args="${@:1}" && (docker-compose -f 'docker-compose.k8s.yml' ${args}) }

restart() { (kubectl scale deployment ${1} --replicas=0 && kubectl scale deployment ${1} --replicas=1) }

run_exec() { args="${@:2}" && (kubectl exec -ti svc/${1} -c ${1} -- /bin/sh -c "${args}") }

run_yarn() {
  NODE_SERVICES='@(blip)'
  BLIP_MOUNTED_NODE_SERVICES='@(tideline|tidepool-platform-client|@tidepool/viz)'

  if [[ ${BLIP_MOUNTED_NODE_SERVICES} =~ ${1} ]]; then
    run_exec blip "cd ./packageMounts/${1} && yarn ${@:2}"
  elif [[ ${NODE_SERVICES} =~ ${1} ]]; then
    run_exec ${1} "yarn ${@:2}"
  else
    printf "The yarn command can only be run on Node.js services\n\n"
  fi
}

set_docker_env() {
  export DOCKER_HOST=tcp://127.0.0.1:2375
}

set_tilt_env() {
  set_docker_env

  set -o allexport
  [[ -f .env ]] && source .env
  set +o allexport

  case "$1" in
    --trap-shutdown) trap 'SHUTTING_DOWN=1 tilt down' EXIT;;
    --shutdown) export SHUTTING_DOWN=1;;
  esac
}

set_kubeconfig() {
  until curl -s --fail http://127.0.0.1:10080/kubernetes-ready; do
    sleep 1;
  done
  curl http://127.0.0.1:10080/config > ~/.kube/config
}

case ${1-help} in
  start) (cd ${DIR} && run_docker_compose up -d ${2-});;
  stop) (cd ${DIR} && run_docker_compose stop ${2-});;
  up) (cd ${DIR} && set_tilt_env --trap-shutdown && tilt up --port=0 ${2-});;
  down) (cd ${DIR} && set_tilt_env --shutdown && tilt down);;
  fix) (restart hydrophone);;
  restart) restart ${2-};;
  destroy) (cd ${DIR} && run_docker_compose rm -fsv);;
  logs) (cd ${DIR} && kubectl logs svc/${2} --tail=20 -c ${2} -f);;
  server-logs) (cd ${DIR} && run_docker_compose logs --tail=20 -f server);;
  exec) run_exec ${2} ${@:3};;
  server-exec) (cd ${DIR} && run_docker_compose exec server sh);;
  yarn) run_yarn ${2} "${@:3}";;
  docker) run_docker "${@:2}";;
  port-forward) (cd ${DIR} && kubectl port-forward svc/${2} ${3});;
  prune) (run_docker "system prune --volumes -af");;
  set-kubeconfig) set_kubeconfig;;
  *|help) usage;;
esac
