#!/bin/bash 
# Install/upgrade Weave Flux to watch the current branch of the CONFIG repo
#
# Usage: install_flux ${SECRET:-.../flux-secret.yaml} ${BRANCH:-current branch} ${PATH:-.../flux}
#
# Current Kubectl context must point to cluster that you want to update.
#
# Provide CONFIG_REPO in env variable OR $(cwd) must be within config repo.
# Provide CLUSTER_NAME in env variable OR $(cwd) must be within clusters subdir of config repo.

CRDS_UNINSTALLED=$(kubectl get crds helmreleases.flux.weave.works >/dev/null; echo $?)
if [ ${CRDS_UNINSTALLED} -eq 0 ]
then
    INSTALL_CRDS=false
else
    INSTALL_CRDS=true
fi

CONFIG_REPO=${CONFIG_REPO:-$(git rev-parse --show-toplevel)}
if [ $? -ne 0 ]
then
    echo "\$CONFIG_REPO cannot be inferred"
    exit 1
fi

BASE=${CONFIG_REPO}/clusters/
CLUSTER_NAME=${CLUSTER_NAME:-$(pwd | sed -e "s#^$BASE##" -e "s#/.*##")}

if [ "$CLUSTER_NAME" == "" ]
then
    echo "\$CLUSTER_NAME cannot be inferred"
    exit 1
fi

if [ ! -d "${CONFIG_REPO}/clusters/${CLUSTER_NAME}" ]
then
   echo "Cannot find cluster definition in config repo at ${CONFIG_REPO}/clusters/${CLUSTER_NAME}"
   exit 1
fi

# Pull the remote url and the branch from Git if not provided
cd $CONFIG_REPO
SOURCE_SECRET=${1:-${BASE}${CLUSTER_NAME}/flux-secret.yaml}
SOURCE_BRANCH=${2:-$(git branch | grep \* | cut -d ' ' -f2)}
SOURCE_PATH=${3:-clusters/${CLUSTER_NAME}/flux}
SOURCE_URL=$(git config --get remote.origin.url)

if [ -f $SOURCE_SECRET ]
then

    GIT_SECRET_NAME=$(basename $SOURCE_SECRET | sed -e s/\.yaml$//)

    if [ "$GIT_SECRET_NAME" != "flux-git-deploy" ]
    then
	    echo "applying secret for flux identity at ${SOURCE_SECRET}"
	    kubectl apply -f ${SOURCE_SECRET}
	    SECRETARG="--set git.secretName=${GIT_SECRET_NAME}"
    else
	    SECRETARG=""
    fi
else 
    GIT_SECRET_NAME="flux-git-deploy"
fi

cd /tmp
rm -rf flux
git clone https://github.com/weaveworks/flux/
cd flux

read -p "Install Flux: install_crds=${INSTALL_CRDS} branch=${SOURCE_BRANCH} path=${SOURCE_PATH} repo=${SOURCE_URL} cluster=${CLUSTER_NAME} ${SECRETARG}? (y|N)  " -n 1 -r
if [[ $REPLY =~ ^[Yy]$ ]]
then 
    set -x
    helm delete flux --purge
    helm upgrade \
    --install \
      --set rbac.create=true \
      --set helmOperator.create=true \
      --set helmOperator.chartsSyncInterval=1m \
      --set helmOperator.replicaCount=1 \
      --set helmOperator.updateChartDeps=true \
      --set helmOperator.createCRD=${INSTALL_CRDS} \
      --set helmOperator.configureRepositories.enable=true \
      --set syncGarbageCollection.enabled=true \
      --set git.url=${SOURCE_URL} \
      --set git.path=${SOURCE_PATH} \
      --set git.branch=${SOURCE_BRANCH} \
      --set git.label=${CLUSTER_NAME} \
      ${SECRETARG} \
      --set git.pollInterval=1m \
      --set git.timeoout=40s \
      --namespace flux \
      --reuse-values \
      --set additionalArgs='{--connect=ws://fluxcloud}' \
      flux \
      chart/flux
else
	echo "No action taken."
fi
