#!/usr/local/bin/python3
#
# modify secrets managed in Amazon External Secrets

import base64
import json
import os
import sys

import boto3
import yaml

if len(sys.argv) != 5:
    print("Usage: external_secret file create|update|delete|dryrun cluster encoded|plaintext")
    exit()

file=sys.argv[1]
op=sys.argv[2]
cluster=sys.argv[3]
encoded=sys.argv[4]

f = open(file,"r")
input = f.read()
docs = yaml.safe_load_all(input)
for manifest in docs:
  if not manifest or  "metadata" not in manifest:
    continue
  env=manifest["metadata"]["namespace"]
  base=manifest["metadata"]["name"]
  data=manifest["data"]
  
  secret = dict()
  secret["apiVersion"]= "kubernetes-client.io/v1"
  secret["kind"] = "ExternalSecret"
  secret["metadata"] = manifest["metadata"]
  secret["secretDescriptor"] = dict()
  secret["secretDescriptor"]["backendType"] = "secretsManager"
  secret["secretDescriptor"]["data"] = list()
  
  values = list() 
  awsvalue = dict()
  client = boto3.client('secretsmanager')
  key=cluster + "/" + env + "/" + base 
  
  for name,value in data.items():
      if encoded == "encoded" or encoded == "true":
          decoded=base64.standard_b64decode(value).decode("utf-8") 
      else:
          decoded=value
      value = dict()
      value["key"] = key
      value["name"] = name
      value["property"] = name
      awsvalue[value["name"]] = decoded
      values.append(value)
  
  secret["secretDescriptor"]["data"] = values
  print("---")
  print(yaml.dump(secret))
  out=json.dumps(awsvalue)
  
  if op == "create":
      client.create_secret(Name=key, SecretString=out)
  elif op == "update":
      client.update_secret(SecretId=key, SecretString=out)
  elif op == "delete":
      client.delete_secret(SecretId=key)
  elif op == "dryrun":
      pass
  else:
      print("unknown operation", op )
