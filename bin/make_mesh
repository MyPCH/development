#!/bin/bash 
#
# Create EKS cluster and install flux
#
# Requires config.yaml file in REMOTE_REPO.
# Requires values.yaml file in REMOTE_REPO.
#
# Depends on eksctl, git, yq,  mktemp
#
# Usage: $0 ${REMOTE_REPO}

set -o pipefail

red=`tput setaf 1`
green=`tput setaf 2`
magenta=`tput setaf 5`
reset=`tput sgr0`

REMOTE_REPO=${1:-$REMOTE_REPO}

if [ -z "$REMOTE_REPO" ]
then
	echo "${red}must provide REMOTE_REPO${reset}"
	exit 1
fi

if [[ $REMOTE_REPO = git@github.com* ]]
then
	remote=$REMOTE_REPO
else
	remote="git@github.com:tidepool-org/$REMOTE_REPO"
fi

if [ -z "$GITHUB_TOKEN" ]
then
	echo "${red}\$GITHUB_TOKEN required.${reset}"
	exit
fi

remotebase=$(basename $remote)

# create temporary workspace to clone Git repos into
mytmpdir=`mktemp -d 2>/dev/null || mktemp -d -t 'mytmpdir'`
trap "rm -rf $mytmpdir" EXIT
cd $mytmpdir

# clone quickstart
git clone git@github.com:/tidepool-org/tidepool-quickstart 
QUICKSTART_DIR=$(realpath ./tidepool-quickstart)

# clone config repo
git clone $remote 
cd $remotebase
CONFIG_DIR=$(realpath .)


# extract values to use for templating
export config=$(yq r values.yaml -j)
export cluster=$(yq r values.yaml -j cluster.metadata.name | sed -e 's/"//g')

linkerd check --pre
if [ $? -ne 0 ]
then
		echo "${red}[x] Failed pre-check.${reset}"
		exit 1
fi

mkdir -p linkerd
linkerd install config > linkerd/linkerd-config.yaml
linkerd install config | kubectl apply -f -

linkerd check config
while [ $? -ne 0 ]
do
    sleep 3
    echo "linkerd check config"
    linkerd check config
done

linkerd install control-plane > linkerd/linkerd-control-plane.yaml
linkerd install control-plane | kubectl apply -f -

linkerd check
while [ $? -ne 0 ]
do
    sleep 3
    echo "linkerd check"
    linkerd check 
done

echo "${magenta}[√] commiting repo${reset}"
# commit changes to repo
git add .
git commit -m "Added tidepool environments"
git push
cd /
# clean up
rm -rf $mytmpdir

echo "${magenta}[√] done${reset}"
