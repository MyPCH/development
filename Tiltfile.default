# Copy this file as `Tiltfile`, update any config variables as needed, and run with `tilt up`

# Configuration #
development_dir = False # Change to the root directory of the tidepool-org/development repo.
mongo_data_dir = False  # <Optional> Change to a local directory to persist mongodb data to.

tidepool_helm_version = '0.1.5' # The version of the Tidepool helm charts to build.
server_secret_file = './server-secret.yaml' # <Optional> The name of the server secrets file used to persist salt hashes. Required for data persistence.
tidepool_helm_overrides_file = './values-override.yaml' # <Optional> If present, applies overrides to the settings in the chart's values.yaml.

tidepool_helm_chart_dir = "{}/charts/tidepool/{}".format(development_dir, tidepool_helm_version)
mongo_helm_chart_dir = "{}/charts/mongo".format(development_dir)

# Deployment
if development_dir:
  # Set up mongo template command and deploy mongodb service
  mongo_helm_template_cmd = 'helm template --name local-mongo '

  if mongo_data_dir:
    mongo_helm_template_cmd += '--set "mongo.hostPath={}" '.format(mongo_data_dir)

  k8s_yaml(local(mongo_helm_template_cmd + mongo_helm_chart_dir))
  k8s_resource('mongodb', port_forwards=[27017])
  watch_file(mongo_helm_chart_dir)

  # Set up tidepool template command and deploy tidepool services
  tidepool_helm_template_cmd = 'helm template --name local '

  if read_file(server_secret_file):
    k8s_yaml(server_secret_file)
    tidepool_helm_template_cmd += '--set "global.secrets.internal.source=other" '
  else:
    print('Generating new unique server secrets. To persist your server secrets between stack builds, ')
    print('run `kubectl get secrets server -o yaml >{}` once the stack is completely started'.format(server_secret_file))

  if read_file(tidepool_helm_overrides_file):
    tidepool_helm_template_cmd += '-f {} '.format(tidepool_helm_overrides_file)
    watch_file(tidepool_helm_overrides_file)

    ### Blip Overrides Start ###
    overrides = read_yaml(tidepool_helm_overrides_file) or {}
    blipOverrides = overrides.get('blip', False)
    if blipOverrides:
      mounts = blipOverrides.get('mounts')
      buildTarget = blipOverrides.get('buildTarget', 'develop')

      if type(mounts) == 'list':
        custom_build_args = {
          'deps': [],
        }

        fallback_commands = []
        sync_commands = []
        run_commands = []
        port_forwards = []

        for mount in mounts:
          hostPath = mount.get('hostPath')
          custom_build_args['deps'].append(hostPath)
          port_forwards += mount.get('portForwards', []);

          if mount.get('type') == 'primary':
            custom_build_args['command'] = 'docker build --target {} -t $EXPECTED_REF {}'.format(buildTarget, hostPath)
            custom_build_args['primaryHostPath'] = hostPath
            # custom_build_args['deps'].append(hostPath)

            image = blipOverrides.get('image', 'tidepool/blip:develop')
            custom_build_args['image'] = image

            fallback_commands.append(fall_back_on([
              '{}/Dockerfile'.format(hostPath),
            ]))

            sync_commands.append(sync(hostPath, '/app'))

            # Run yarn install on app directory when it's package.json changes
            run_commands.append(run(
              'cd /app && yarn install',
              trigger='{}/package.json'.format(hostPath),
            ))

          elif mount.get('type') == 'linked':
            package_name = mount.get('packageName');

            local('cd {path} && mkdir -p tiltMounts/{pkg} && rsync -a --delete --exclude "node_modules" --exclude ".git" --exclude "dist" --exclude "coverage" {hostPath}/ {path}/tiltMounts/{pkg}'.format(
              path=custom_build_args['primaryHostPath'],
              hostPath=hostPath,
              pkg=package_name,
            ))

            print('Linking package: {}'.format(package_name))

            sync_commands.append(sync(hostPath, '/app/tiltMounts/{}'.format(package_name)))

            # Run yarn install in linked package directory when it's package.json changes
            run_commands.append(run(
              'cd /app/tiltMounts/{} && yarn install'.format(package_name),
              trigger='{}/package.json'.format(hostPath),
            ))

            run_commands.append(run(
              '[ ! -L /app/node_modules/{pkg}  ] && cd /app/tiltMounts/{pkg} && yarn link && cd /app && yarn link {pkg}'.format(
                pkg=package_name,
              ),
            ))

          else:
            package_name = mount.get('name');
            print('Unlinking package: {}'.format(package_name))
            run_commands.append(run(
              '[ -L /app/node_modules/{pkg} ] && yarn unlink {pkg}; cd /{pkg} && yarn unlink; cd /app && rm -f node_modules/{pkg} && yarn install --force'.format(
                pkg=package_name,
              ),
            ))

        live_update_commands = fallback_commands + sync_commands + run_commands;
        print('run_commands', run_commands)

        if custom_build_args.get('command'):
          print('Building custom blip image using base image: {}'.format(custom_build_args.get('image')))
          custom_build(
            ref=custom_build_args.get('image'),
            command=custom_build_args.get('command'),
            deps=custom_build_args.get('deps'),
            disable_push=True,
            live_update=live_update_commands,
            ignore=['node_modules'],
          )

      for i in range(len(port_forwards)):
        port_forwards[i] = int(port_forwards[i])

      k8s_resource('blip', port_forwards=port_forwards, trigger_mode=TRIGGER_MODE_AUTO)
      k8s_resource('gateway-proxy', port_forwards=[3000])
    ### Blip Overrides End ###

  # fail('NOT YET ;)')

  k8s_yaml(local(tidepool_helm_template_cmd + tidepool_helm_chart_dir))
  watch_file(tidepool_helm_chart_dir)
else:
  fail('OOPS! You need to point "development_dir" to the root of local copy of the tidepool "development" repo in your Tiltfile')
