### Helpers Start ###
def getNested(dict, path, fallback=None):
  value = dict
  for path_segment in path.split('.'):
    value = value.get(path_segment, {})
  return value or fallback
### Helpers End ###

### Global Start ###
tidepool_helm_overrides_file = './Tiltconfig.yaml'
config = read_yaml(tidepool_helm_overrides_file)
configOverrides = read_yaml('./local/Tiltconfig.yaml', False)

watch_file(tidepool_helm_overrides_file)

if type(configOverrides) == 'dict':
  config.update(configOverrides.items())
  tidepool_helm_overrides_file = './local/Tiltconfig.yaml'
  watch_file(tidepool_helm_overrides_file)

mongo_helm_chart_dir = "./charts/mongo"
### Global End ###

### Main Start ###
def main():
  # Provision the gloo gateway service
  defineMongoService()

  # Back out of actual provisioning for debugging purposes by uncommenting below
  # fail('NOT YET ;)')
### Main End ###

### MongoDB Start ###
def defineMongoService ():
  mongo_helm_template_cmd = 'helm template --name tidepool-local-db --namespace default '

  mongodb_data_dir = getNested(config, 'mongodb.hostPath')
  if mongodb_data_dir:
    mongo_helm_template_cmd += '--set "mongo.hostPath={}" '.format(mongodb_data_dir)

  k8s_yaml(local(mongo_helm_template_cmd + mongo_helm_chart_dir))

  mongodb_port_forwards = getNested(config,'mongodb.portForwards', ['27017'])
  k8s_resource('mongodb', port_forwards=mongodb_port_forwards)
  watch_file(mongo_helm_chart_dir)
### MongoDB End ###

# Unleash the beast
main()
